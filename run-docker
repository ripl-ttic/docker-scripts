#!/bin/bash

# constants
SYS_LINUX=0
SYS_MAC=1

# define constants and default values
USERNAME=ripl
CMD="/bin/bash"
DAEMON_FLAG="-it"
ATTACH_TO_DEPUTY=1
PROJECT_SCRIPTS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
PROJECT_HOME=$PROJECT_SCRIPTS/..
ENABLE_USER_MAPPING=1
ROS_MASTER_HOST="localhost"
SYSTEM=-1
BIND_MOUNT_OPTIONS=""
LCM_IP_OPTION=""
LCM_TTL_OPTION=""

# get current system
SYSTEM_CODENAME="$(uname -s)"
case "${SYSTEM_CODENAME}" in
    Linux*)  # Linux
    SYSTEM=$SYS_LINUX
    ;;
    Darwin*) # Mac OSX
    BIND_MOUNT_OPTIONS=":delegated"
    SYSTEM=$SYS_MAC
    ;;
    *)       # System not supported
    echo "[WARNING] : System '${SYSTEM_CODENAME}' not officially supported."
esac

# load project settings
source $PROJECT_SCRIPTS/.load-project-settings.sh
if [ $? -ne 0 ]; then
    exit $?
fi

# define container and deputy name
CONTAINER_NAME=$PROJECT_NAME
DEPUTY_NAME="deputy-$PROJECT_NAME"

# parse arguments
CMD_ARGS=()
while [ $# -gt 0 ]; do
    arg=$1
    CMD_ARGS+=("$arg")
    shift
    case $arg in
        --name)
        CONTAINER_NAME=$1
        shift
        CMD_ARGS=()
        ;;
        -d|--daemon)
        DAEMON_FLAG="-d"
        CMD_ARGS=()
        ;;
        --new)
        ATTACH_TO_DEPUTY=0
        CMD_ARGS=()
        ;;
        --root)
        ENABLE_USER_MAPPING=0
        CMD_ARGS=()
        ;;
        --ros-master-host)
        ROS_MASTER_HOST=$1
        shift
        CMD_ARGS=()
        ;;
        --)
        CMD_ARGS=()
        ;;
    esac
done

# update CMD if a new commands argument was passed
if [ -n "$CMD_ARGS" ]; then
    CMD="${CMD_ARGS[@]}"
fi

# check if there is another container with the same name
docker inspect $CONTAINER_NAME &> /dev/null
if [ $? -eq 0 ]; then
    echo "Another container with the name '$CONTAINER_NAME' is present. Please, remove it first or use the flag '--name' to set a custom name."
    echo "Exiting."
    exit 21
fi

# check if CUSTOM_LCM_IP, CUSTOM_LCM_TTL variables are set
if [ -n "$CUSTOM_LCM_IP" ]; then
	LCM_IP_OPTION="-e LCM_IP=$CUSTOM_LCM_IP"
fi
if [ -n "$CUSTOM_LCM_TTL" ]; then
	LCM_TTL_OPTION="-e LCM_TTL=$CUSTOM_LCM_TTL"
fi

# check if there is a deputy running, if there is, attach to the existing container
docker inspect -f {{.State.Running}} $DEPUTY_NAME &> /dev/null
DEPUTY_EXISTS="$((1-$?))"
if [ $DEPUTY_EXISTS -eq 1 ] && [ $ATTACH_TO_DEPUTY -eq 1 ]; then
    echo "Deputy container found! Reusing environment"
    # create user mapping instruction
    USER_MAPPING_INSTR=""
    if [ $ENABLE_USER_MAPPING -eq 1 ]; then
        USER_MAPPING_INSTR="-u=$UID"
    fi
    # append to deputy
    docker exec \
    -it \
    $USER_MAPPING_INSTR \
    $DEPUTY_NAME $CMD
else
    if [ $ATTACH_TO_DEPUTY -eq 1 ]; then
        echo "Deputy NOT found! Starting a new container"
    fi
    # create user mapping instruction
    USER_MAPPING_INSTR=""
    USER_HOME="/root"
    if [ $ENABLE_USER_MAPPING -eq 1 ]; then
        USER_MAPPING_INSTR="-e USER=$USERNAME:$UID"
        USER_HOME="/home/$USERNAME-docker"
    fi
    # append to deputy
    x-docker run \
    --rm \
    $DAEMON_FLAG \
    --privileged \
    -v $HOME/.docker_${PROJECT_NAME}_bash_history:$USER_HOME/.bash_history$BIND_MOUNT_OPTIONS \
    -v $PROJECT_HOME:/code$BIND_MOUNT_OPTIONS \
    -v $HOME/.ripl_ssh:$USER_HOME/.ssh$BIND_MOUNT_OPTIONS \
    -v $PROJECT_SCRIPTS/assets/environment.sh:/environment.sh$BIND_MOUNT_OPTIONS \
    -v $PROJECT_SCRIPTS/assets/entrypoint.sh:/entrypoint.sh$BIND_MOUNT_OPTIONS \
    -v $PROJECT_SCRIPTS/assets/etc_sudoers:/etc/sudoers$BIND_MOUNT_OPTIONS \
    -v /etc/timezone:/etc/timezone:ro \
    -v /etc/localtime:/etc/localtime:ro \
    --net="host" \
    $LCM_IP_OPTION \
    $LCM_TTL_OPTION \
    -e "ROS_MASTER_HOST=$ROS_MASTER_HOST" \
    $USER_MAPPING_INSTR \
    --name $CONTAINER_NAME \
    $DOCKER_IMAGE $CMD
fi
